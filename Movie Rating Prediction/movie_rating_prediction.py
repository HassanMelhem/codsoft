# -*- coding: utf-8 -*-
"""Movie_Rating_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XdEHWI4wY9l2zYFjcU2AK0GwAl6dSb_x

# Movie Rating Predictions

Importing The Dependancies
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.max_columns', None)
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense

"""Importing The Datasets into a Pandas Datafram"""

df_user = pd.read_csv("/content/users.dat",sep='::',engine='python', header=None)
df_user.columns =['UserID','Gender','Age','Occupation','Zip-code']
df_user.head(10)

## Checking for Null Values
df_user.isnull().sum()

#download datasets from https://www.kaggle.com/code/sherinclaudia/movie-rating-prediction/notebook
df_movie = pd.read_csv('/content/movies.dat', sep = '::', engine='python', encoding='latin1', header=None)
df_movie.columns = ['MovieID','MovieName','Category']
df_movie.head(10)

## Checking for Null Values
df_movie.isnull().sum()

df_rating = pd.read_csv("/content/ratings.dat",sep='::', engine='python', header=None)
df_rating.columns =['UserID','MovieID','Ratings','TimeStamp']
df_rating.head(10)

## Checking for Null Values
df_rating.isnull().sum()

"""Concatinating The 3 datasets"""

df_movie_rating = pd.merge(df_movie, df_rating, on='MovieID')
df_movie_rating.head(10)

df = pd.merge(df_user, df_movie_rating, on='UserID')
df.head(25)

"""#Performing EDA on the Dataset"""

#Visualize user age and gender distribution
plt.figure(figsize=(10, 6))
sns.countplot(df, x='Age', hue='Gender')

"""Most people that are rating the movies are between 18 and 35

Male Ratings are significantly larger than female rating
"""

# Visualizing the ratings given by the users
plt.figure(figsize=(10, 6))
sns.countplot(df, x='Ratings')

"""Most Ratings given are 3, 4 and 5 with 4 being the most relevant result

## Getting the Features and labels ready for training

First Finding the label Encoding the Gender
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])
df.head()

"""Finding The Dummy Variables for The Categories"""

categories_dummies = df['Category'].str.get_dummies()
df = pd.concat([df, categories_dummies], axis=1)
df.drop('Category', axis=1, inplace=True)
df.head()

df.info()

"""dropping Unwanted Columns"""

df = df.drop(['Zip-code', 'MovieName', 'UserID'], axis=1)
df.head()

"""Importing the features and the labels"""

X = df.drop(['Ratings', 'TimeStamp'], axis=1).values
y = df['Ratings'].values

print(X)
print(y)

"""Splitting the data into train and test dataset"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""#Testing Different Model for Rating Prediction

Linear Regression
"""

model = LinearRegression()
model.fit(X_train, y_train)
print(f'mean squared error loss: {mean_squared_error(model.predict(X_test), y_test)}')

"""Decision Tree Regressor"""

dtr = DecisionTreeRegressor()
dtr.fit(X_train, y_train)
print(f'mean squared error loss: {mean_squared_error(dtr.predict(X_test), y_test)}')

"""Using Neural Networks"""

model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))  # Output layer for regression task

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')

model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1)

loss = model.evaluate(X_test, y_test)
print("Test Loss:", loss)

# Predict and round the outputs to the nearest integer within the range 1 to 5
predictions = model.predict(X_test)
rounded_predictions = np.round(np.clip(predictions, 1, 5))

print("Rounded Predictions:", rounded_predictions)

"""Comparing First 30 predictions with True Values"""

for i in range(30):
    print(f"True Rating: {y_test[i]}, Predicted Rating: {rounded_predictions[i]}")

